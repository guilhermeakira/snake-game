{"version":3,"sources":["Hooks/useInterval.ts","Board/constants.ts","Board/boardFunctions.ts","LinkedList/index.ts","Board/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useInterval","Direction","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","ArrowKeyDirectionMap","ArrowUp","Up","ArrowDown","Down","ArrowLeft","Left","ArrowRight","Right","getBoard","boardSize","board","counter","row","currentRow","column","push","getRandomCell","Math","floor","random","getRandomFreeCell","blackList","possibleValue","has","LinkedListNode","value","next","this","LinkedList","head","tail","node","Board","useState","setBoardSize","setBoard","snake","setSnake","Set","snakeCells","setSnakeCells","foodCell","setFoodCell","direction","setDirection","hasStarted","setHasStarted","getClassName","cellValue","handleReset","useCallback","snakeStartingCellValue","handleSnakeMovement","previousTailValue","previousHeadValue","nextHeadValue","currentHeadValue","getCellValueInDirection","snakeOccupiedCells","delete","isOutOfBounds","newHeadNode","previousHeadNode","nextSnakeCells","add","newTailNode","currentTail","growSnake","handleKeyDown","event","newDirection","key","window","addEventListener","removeEventListener","htmlFor","onChange","possibleBoardSize","parseInt","currentTarget","className","map","rowIndex","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c0be315.chunk.js","sourcesContent":["import { useRef, useEffect } from 'react'\r\n\r\nfunction useInterval(callback: () => void, delay: number | null) {\r\n  const savedCallback = useRef<() => void | null>()\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback\r\n  })\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      if (typeof savedCallback?.current !== 'undefined') {\r\n        savedCallback?.current()\r\n      }\r\n    }\r\n\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay)\r\n      return () => clearInterval(id)\r\n    }\r\n  }, [delay])\r\n}\r\n\r\nexport default useInterval\r\n","export const DEFAULT_BOARD_SIZE = 15;\r\n\r\nexport enum Direction {\r\n  Up = \"UP\",\r\n  Down = \"DOWN\",\r\n  Left = \"LEFT\",\r\n  Right = \"RIGHT\",\r\n}\r\n\r\nexport const ArrowKeyDirectionMap: Record<string, Direction> = {\r\n  ArrowUp: Direction.Up,\r\n  ArrowDown: Direction.Down,\r\n  ArrowLeft: Direction.Left,\r\n  ArrowRight: Direction.Right,\r\n}\r\n","import { Direction } from './constants';\r\n\r\nexport const getBoard = (boardSize: number): number[][] => {\r\n  const board = [];\r\n  let counter = 1;\r\n  for (let row = 0; row < boardSize; row++) {\r\n    const currentRow = [];\r\n    for (let column = 0; column < boardSize; column++) {\r\n      currentRow.push(counter++);\r\n    }\r\n    board.push(currentRow);\r\n  }\r\n  return board;\r\n}\r\n\r\nexport const getRandomCell = (boardSize: number): number => Math.floor(Math.random() * boardSize * boardSize) + 1;\r\n\r\nexport const getRandomFreeCell = (boardSize: number, blackList?: Set<number>): number => {\r\n  let possibleValue = getRandomCell(boardSize);\r\n  if (!blackList) {\r\n    return possibleValue;\r\n  }\r\n  while (blackList.has(possibleValue)) {\r\n    possibleValue = getRandomCell(boardSize);\r\n  }\r\n  return possibleValue;\r\n}\r\n\r\n\r\nexport const getCellValueInDirection = (currentHeadValue: number, direction: Direction, boardSize: number): number => {\r\n  if (direction === Direction.Up) {\r\n    return currentHeadValue - boardSize;\r\n  }\r\n  if (direction === Direction.Down) {\r\n    return currentHeadValue + boardSize;\r\n  }\r\n  if (direction === Direction.Right) {\r\n    return currentHeadValue + 1;\r\n  }\r\n  if (direction === Direction.Left) {\r\n    return currentHeadValue - 1;\r\n  }\r\n  return currentHeadValue;\r\n}\r\n\r\nexport const isOutOfBounds = (previousHeadValue: number, nextHeadValue: number, boardSize: number): boolean => {\r\n  const isOutOfBoundsUp = nextHeadValue < 1;\r\n  if (isOutOfBoundsUp) {\r\n    return true;\r\n  }\r\n\r\n  const isOutOfBoundsDown = nextHeadValue > boardSize * boardSize;\r\n  if (isOutOfBoundsDown) {\r\n    return true;\r\n  }\r\n\r\n  const currentHeadValueIsFarLeft = previousHeadValue % boardSize === 1;\r\n  const nextHeadValueIsFarRight = nextHeadValue % boardSize === 0;\r\n  const isOutOfBoundsLeft = currentHeadValueIsFarLeft && nextHeadValueIsFarRight;\r\n  if (isOutOfBoundsLeft) {\r\n    return true;\r\n  }\r\n\r\n  const currentHeadValueIsFarRight = previousHeadValue % boardSize === 0;\r\n  const nextHeadValueIsFarLeft = nextHeadValue % boardSize === 1;\r\n  const isOutOfBoundsRight = currentHeadValueIsFarRight && nextHeadValueIsFarLeft;\r\n  if (isOutOfBoundsRight) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n","export class LinkedListNode {\r\n  value: number;\r\n  next: LinkedListNode | null;\r\n  constructor(value: number) {\r\n    this.value = value;\r\n    this.next = null;\r\n  }\r\n}\r\n\r\nexport class LinkedList {\r\n  head: LinkedListNode;\r\n  tail: LinkedListNode;\r\n  constructor(value: number) {\r\n    const node = new LinkedListNode(value);\r\n    this.head = node;\r\n    this.tail = node;\r\n  }\r\n}\r\n","import React, { FC, useCallback, useEffect, useState } from 'react';\r\n\r\nimport useInterval from '../Hooks/useInterval';\r\nimport { DEFAULT_BOARD_SIZE, Direction, ArrowKeyDirectionMap } from './constants';\r\nimport { getBoard, getRandomFreeCell, getCellValueInDirection, isOutOfBounds } from './boardFunctions';\r\nimport { LinkedList, LinkedListNode } from '../LinkedList';\r\n\r\nimport './Board.css';\r\n\r\nconst Board: FC = () => {\r\n  const [boardSize, setBoardSize] = useState(DEFAULT_BOARD_SIZE);\r\n  const [board, setBoard] = useState(getBoard(boardSize));\r\n  const [snake, setSnake] = useState(new LinkedList(getRandomFreeCell(boardSize)));\r\n  const [snakeCells, setSnakeCells] = useState(new Set([snake.head.value]));\r\n  const [foodCell, setFoodCell] = useState(getRandomFreeCell(boardSize, snakeCells));\r\n  const [direction, setDirection] = useState(Direction.Up);\r\n  const [hasStarted, setHasStarted] = useState(false);\r\n\r\n  const getClassName = (cellValue: number): string => {\r\n    if (foodCell === cellValue) {\r\n      return 'food';\r\n    }\r\n\r\n    if (snakeCells.has(cellValue)) {\r\n      return 'snake';\r\n    }\r\n\r\n    return '';\r\n  };\r\n\r\n  const handleBoardSizeChange = (event: React.FormEvent<HTMLInputElement>) => {\r\n    const possibleBoardSize = (parseInt(event.currentTarget.value));\r\n\r\n    if (!possibleBoardSize || possibleBoardSize <= 1) {\r\n      return;\r\n    }\r\n\r\n    setBoardSize(parseInt(event.currentTarget.value));\r\n  }\r\n\r\n  const handleReset: () => void = useCallback(() => {\r\n    const snakeStartingCellValue = getRandomFreeCell(boardSize);\r\n    setHasStarted(false);\r\n    setSnake(new LinkedList(snakeStartingCellValue));\r\n    setSnakeCells(new Set([snakeStartingCellValue]))\r\n    setFoodCell(getRandomFreeCell(boardSize, new Set([snakeStartingCellValue])));\r\n  }, [boardSize])\r\n\r\n  const handleFoodConsumption = (): void => {\r\n    setFoodCell(getRandomFreeCell(boardSize, snakeCells));\r\n  }\r\n\r\n  const growSnake = (previousTailValue: number): void => {\r\n    const newTailNode = new LinkedListNode(previousTailValue)\r\n    const currentTail = snake.tail;\r\n    snake.tail = newTailNode;\r\n    snake.tail.next = currentTail;\r\n    const nextSnakeCells = new Set(snakeCells);\r\n    nextSnakeCells.add(foodCell);\r\n\r\n    setSnakeCells(nextSnakeCells);\r\n  }\r\n\r\n  const handleSnakeMovement = (): void => {\r\n    if (!hasStarted) {\r\n      return;\r\n    }\r\n    const previousTailValue = snake.tail.value;\r\n    const previousHeadValue = snake.head.value;\r\n    const nextHeadValue = getCellValueInDirection(previousHeadValue, direction, boardSize);\r\n\r\n    const snakeOccupiedCells = new Set(snakeCells);\r\n    snakeOccupiedCells.delete(previousTailValue);\r\n\r\n    if (isOutOfBounds(previousHeadValue, nextHeadValue, boardSize)\r\n      || snakeOccupiedCells.has(nextHeadValue)) {\r\n      handleReset();\r\n      return;\r\n    }\r\n\r\n    const newHeadNode = new LinkedListNode(nextHeadValue);\r\n    const previousHeadNode = snake.head;\r\n    snake.head = newHeadNode;\r\n    previousHeadNode.next = newHeadNode;\r\n\r\n    if (snake.tail.next !== null) {\r\n      snake.tail = snake.tail.next;\r\n    }\r\n\r\n    const nextSnakeCells = new Set(snakeCells);\r\n    nextSnakeCells.delete(previousTailValue);\r\n    nextSnakeCells.add(nextHeadValue);\r\n\r\n    setSnakeCells(nextSnakeCells);\r\n\r\n    if (foodCell === nextHeadValue) {\r\n      growSnake(previousTailValue);\r\n      handleFoodConsumption();\r\n    }\r\n  };\r\n\r\n  const handleKeyDown: (event: KeyboardEvent) => void = useCallback((event) => {\r\n    const newDirection: Direction = ArrowKeyDirectionMap[event.key];\r\n    if (!newDirection) {\r\n      return;\r\n    }\r\n    if (!hasStarted) {\r\n      setHasStarted(true);\r\n    }\r\n    setDirection(newDirection);\r\n  }, [hasStarted]);\r\n\r\n  useInterval(() => {\r\n    handleSnakeMovement();\r\n  }, 150);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleKeyDown);\r\n\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, [handleKeyDown]);\r\n\r\n  useEffect(() => {\r\n    setBoard(getBoard(boardSize));\r\n    handleReset()\r\n  }, [boardSize, handleReset]);\r\n\r\n  return (\r\n    <>\r\n      <h1>Snake!</h1>\r\n      <label htmlFor=\"boardSize\">BoardSize</label>\r\n      <input id=\"boardSize\" value={boardSize} onChange={handleBoardSizeChange} />\r\n      <div className=\"board\">\r\n        {board.map((row, rowIndex) => (\r\n          <div key={rowIndex} className=\"row\">\r\n            {row.map((cellValue) => (\r\n              <div key={cellValue} className={`cell ${getClassName(cellValue)}`}/>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react';\nimport Board from './Board';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}